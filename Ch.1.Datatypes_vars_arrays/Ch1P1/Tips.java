public class Tips {

    /* В классе Tips будут собраны все пройденные на уроке техники или трюки манупуляции кодом и данными */
    /* Все нижеописанное поможет выполнить домашнее задание и закрепить пройденный материал */
    /* Урок 1.1 - Часто используемые трюки для работы с переменными примитивных типов данных */

    public static void main(String args[]){

        // P.S. В Java нельзя использовать неинициализированные переменные в вычислениях или операциях вывода
        // Пример для вывода:
        // int a;
        // System.out.println(a); - это ошибка
        // Пример для вычислений:
        // int a;
        // a++; - это ошибка, несмотря на то, что Java по умолчанию устанавливает в неинициализированную переменную значение 0

        /* 1 - Случай выхода за границы допустимых значений типов данных */

        System.out.println("\n!!Выход за границы!!\n");

        byte x = -128; // Минимально возможное отрицательное значение для byte
        byte y = 127; // Максимально возможное положительное значение для byte

        System.out.println("До выхода за границу:x=" + x + " y=" + y); // Убедимся, что x = -128, а y = 127

        x--; // Попробуем получить число меньше -128 (Ожидаем получить -129)
        y++; // Пытаемся получить число больше 127 (Ожидаем получить 128)

        System.out.println("После выхода за границу:x=" + x + " y=" + y); // Однако получаем: x = 127, а y = -128

        // Следовательно, можно сделать вывод, что при выходе за границы допустимых значений типа данных
        // происходит циклический переход к максимальному значению противоположного знака
        // в рассмотренном примере -128 перешло в 127, а 127 перешло в -128
        // Аналогичная ситуация будет происходить и с другими типами данных

        /* 2 - Инкремент и декремент */

        System.out.println("\n!!Инкремент и декремент!!\n");

        int a = 5;
        System.out.println("До инкремента:a=" + a); // Убедимся, что а = 5
        a++; // это сокращенная запись от a = a + 1 или от a += 1, увеличивает целое число на единицу
        System.out.println("После инкремента:a=" + a); // Проверим, что получили a = 6
        a--; // это сокращенная запись от a = a - 1 или от a -= 1, уменьшает целое число на единицу
        System.out.println("После декремента:a=" + a); // Проверим, что снова a = 5

        /* 3 - Операции деления нацело(/) и остатка от деления(%) */

        System.out.println("\n!!Деление нацело и остаток от деления!!\n");

        int s = 5234; // Делимое
        int p = 25; // Делитель
        int r; // Остаток

        System.out.println("До деления:s=" + s);

        s = s / p; // Поделили s на p и сохранили частное в s

        System.out.println("После деления:s=" + s); // Ожидаем после деления получить 209.36, но получаем 209
        // Отбрасывание дробной части произошло потому что результат деления был сохранен в переменную типа int,
        // которая хранит только целые числа
        // Таким образом для деления нацело без учета округления(то есть отбрасывания остатка)
        // необходимо результат деления присваивать переменной целочисленного типа

        r = s % p; // Теперь рассмотрим операцию взятия остатка от деления s на p

        System.out.println("Остаток:r=" + r); // Стоит отметить, что остаток от деления всегда меньше делителя

        /* 4 - Определение кратности одного числа на другое */

        System.out.println("\n!!Определение кратности чисел!!\n");

        // Число х кратно числу у, если остаток от деления х на у равен 0
        // В случае, если остаток от деления больше нуля, то число х не кратно числу у

        int x1 = 125, y1 = 5, y2 = 4;
        boolean k1, k2; // Здесь будем хранить информацию о кратности

        k1 = (x1 % y1 == 0); // Ожидаем получить true, так как остаток от деления x1 на у1 равен нуля
        k2 = (x1 % y2 == 0); // Ожидаем получить false, так как остаток от деления x1 на у1 больше нуля

        System.out.println("Результат определения:k1=" + k1 + " k2=" + k2);

        /* 4 - Разделение числа на отдельные цифры / Скрепление отдельных цифр для получения числа */

        System.out.println("\n!!Разделение числа/скрепление цифр!!\n");

        // Разделение - для этого нужно взять остаток от деления на 10 и тем самым получить цифру из последнего разряда числа
        // Чтобы перейти к следующему разряду делим число на 10 и int отбрасывает полученный остаток
        // тем самым получаем число разрядность которого меньше
        // И это повторяется для каждого разряда, пока число не станет равным 0

        int q = 6789; //  Данное число разделим на цифры
        int f,g,h,j; // И полученные цифры присвоим данным переменным

        System.out.println("Число до разбиения:q=" + q);

        f = q % 10; // Получаем цифру 9
        q /= 10; // Избавляемся от цифры 9 в q (int работает в нашу пользу, убирая остаток 0.9), то есть уменьшаем разрядность числа на 1

        System.out.println("Получили цифру и убрали разряд:f=" + f + " q=" + q);

        g = q % 10; // Получаем цифру 8
        q /= 10; // Избавляемся от цифры 8 в q (int работает в нашу пользу, убирая остаток 0.8), то есть уменьшаем разрядность числа на 1

        System.out.println("Получили цифру и убрали разряд:f=" + g + " q=" + q);

        h = q % 10; // Получаем цифру 7
        q /= 10; // Избавляемся от цифры 7 в q (int работает в нашу пользу, убирая остаток 0.7), то есть уменьшаем разрядность числа на 1

        System.out.println("Получили цифру и убрали разряд:f=" + h + " q=" + q);

        j = q % 10; // Получаем цифру 6 (так как осталась последняя цифра в q, то можно просто присвоить j=q)
        q /= 10; // Избавляемся от цифры 6 в q (int работает в нашу пользу, убирая остаток 0.6), то есть уменьшаем разрядность числа на 1

        System.out.println("Получили цифру и убрали разряд:f=" + j + " q=" + q);

        System.out.println("Число после разбиения:q=" + q);


        // Соединение - если необходимо присоединить к произвольному целому положительному числу a
        // какое-либо число b длиною в k цифр, то необходимо число a умножить на 10^k и прибавить b
        // Для целых отрицательных чисел догадаться самим ;-)

        //Скрепим полученные при разделении переменные обратно в q

        System.out.println("\nЧисло до скреплнеия:q=" + q);

        // Так как q=0, то разрядность числа не меняется - имеем класс единиц;
        // Умножаем на 10, так как в j хранится число длиною в 1 цифра
        // Если бы в j хранилось число длиною в 3 цифры, умножили был на 1000
        q *= 10;
        q += j; // Прибавляем цифру

        System.out.println("Умножили на 10 и прибавили число:j=" + j + " q=" + q);

        q *= 10; // Увеличиваем разрядность числа - теперь имеем класс десятков
        q += h; // Прибавляем цифру

        System.out.println("Умножили на 10 и прибавили число:h=" + h + " q=" + q);

        q *= 10; // Увеличиваем разрядность числа - теперь имеем класс сотен
        q += g; // Прибавляем цифру

        System.out.println("Умножили на 10 и прибавили число:g=" + g + " q=" + q);

        q *= 10; // Увеличиваем разрядность числа - теперь имеем класс тысяч
        q += f; // Прибавляем цифру

        System.out.println("Умножили на 10 и прибавили число:f=" + f + " q=" + q);

        System.out.println("Число после скрепления:q=" + q);
    }

}
